{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iProg\\\\OneDrive\\\\Documents\\\\Football_predict\\\\nfl_prediction_system\\\\nfl_prediction_system\\\\frontend\\\\src\\\\components\\\\HistoryChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js/auto';\n\n/**\n * HistoryChart renders a line chart of ensemble probabilities over time.\n *\n * Uses Chart.js via the `chart.js/auto` bundle which automatically registers\n * all necessary chart types. Whenever the `history` prop updates, the chart\n * is re-rendered. Each entry in `history` should have a `date` and\n * `ensemble_proba` field.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HistoryChart({\n  history\n}) {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    // Clean up any existing chart to avoid accumulation\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    // Extract labels and data\n    const labels = history.map(item => item.date.toLocaleTimeString());\n    const dataPoints = history.map(item => item.ensemble_proba * 100);\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Ensemble Win Probability (%)',\n          data: dataPoints,\n          borderColor: '#0074D9',\n          backgroundColor: 'rgba(0, 116, 217, 0.1)',\n          tension: 0.2\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            min: 0,\n            max: 100,\n            title: {\n              display: true,\n              text: 'Win Probability (%)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Time of Prediction'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  }, [history]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Prediction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef,\n      height: \"300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(HistoryChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = HistoryChart;\nexport default HistoryChart;\nvar _c;\n$RefreshReg$(_c, \"HistoryChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","HistoryChart","history","_s","chartRef","chartInstanceRef","ctx","current","getContext","destroy","labels","map","item","date","toLocaleTimeString","dataPoints","ensemble_proba","type","data","datasets","label","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","scales","y","min","max","title","display","text","x","plugins","legend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","height","_c","$RefreshReg$"],"sources":["C:/Users/iProg/OneDrive/Documents/Football_predict/nfl_prediction_system/nfl_prediction_system/frontend/src/components/HistoryChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart } from 'chart.js/auto';\n\n/**\n * HistoryChart renders a line chart of ensemble probabilities over time.\n *\n * Uses Chart.js via the `chart.js/auto` bundle which automatically registers\n * all necessary chart types. Whenever the `history` prop updates, the chart\n * is re-rendered. Each entry in `history` should have a `date` and\n * `ensemble_proba` field.\n */\nfunction HistoryChart({ history }) {\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    // Clean up any existing chart to avoid accumulation\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    // Extract labels and data\n    const labels = history.map((item) => item.date.toLocaleTimeString());\n    const dataPoints = history.map((item) => item.ensemble_proba * 100);\n    chartInstanceRef.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: 'Ensemble Win Probability (%)',\n            data: dataPoints,\n            borderColor: '#0074D9',\n            backgroundColor: 'rgba(0, 116, 217, 0.1)',\n            tension: 0.2\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            min: 0,\n            max: 100,\n            title: {\n              display: true,\n              text: 'Win Probability (%)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Time of Prediction'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  }, [history]);\n\n  return (\n    <div className=\"chart-container\">\n      <h2>Prediction History</h2>\n      <canvas ref={chartRef} height=\"300\"></canvas>\n    </div>\n  );\n}\n\nexport default HistoryChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,QAAQ,eAAe;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,SAASC,YAAYA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMQ,gBAAgB,GAAGR,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,MAAMU,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C;IACA,IAAIH,gBAAgB,CAACE,OAAO,EAAE;MAC5BF,gBAAgB,CAACE,OAAO,CAACE,OAAO,CAAC,CAAC;IACpC;IACA;IACA,MAAMC,MAAM,GAAGR,OAAO,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAAC;IACpE,MAAMC,UAAU,GAAGb,OAAO,CAACS,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACI,cAAc,GAAG,GAAG,CAAC;IACnEX,gBAAgB,CAACE,OAAO,GAAG,IAAIT,KAAK,CAACQ,GAAG,EAAE;MACxCW,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACJR,MAAM,EAAEA,MAAM;QACdS,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,8BAA8B;UACrCF,IAAI,EAAEH,UAAU;UAChBM,WAAW,EAAE,SAAS;UACtBC,eAAe,EAAE,wBAAwB;UACzCC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,GAAG,EAAE,CAAC;YACNC,GAAG,EAAE,GAAG;YACRC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF,CAAC;UACDC,CAAC,EAAE;YACDH,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF;QACF,CAAC;QACDE,OAAO,EAAE;UACPC,MAAM,EAAE;YACNJ,OAAO,EAAE;UACX;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC9B,OAAO,CAAC,CAAC;EAEb,oBACEF,OAAA;IAAKqC,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BtC,OAAA;MAAAsC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3B1C,OAAA;MAAQ2C,GAAG,EAAEvC,QAAS;MAACwC,MAAM,EAAC;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACvC,EAAA,CA7DQF,YAAY;AAAA4C,EAAA,GAAZ5C,YAAY;AA+DrB,eAAeA,YAAY;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}