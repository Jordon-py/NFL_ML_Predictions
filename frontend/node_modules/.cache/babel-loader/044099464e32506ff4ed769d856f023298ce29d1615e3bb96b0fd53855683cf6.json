{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iProg\\\\OneDrive\\\\Documents\\\\Football_predict\\\\nfl_prediction_system\\\\nfl_prediction_system\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PredictionForm from './components/PredictionForm';\nimport PredictionResult from './components/PredictionResult';\nimport HistoryChart from './components/HistoryChart';\nimport axios from 'axios';\n\n/**\n * NFL Game Prediction Dashboard - Main Application Component\n *\n * This sophisticated React component serves as the central hub for an interactive\n * NFL game outcome prediction system. It orchestrates a seamless user experience\n * by managing prediction workflows, maintaining historical data, and providing\n * real-time visual feedback through dynamic charts and result displays.\n *\n * Key Responsibilities:\n * - Manages application state for prediction results and historical records\n * - Coordinates communication between user input forms and backend prediction services\n * - Renders conditional UI components based on user interactions and data availability\n * - Implements error handling for network requests and API failures\n * - Maintains chronological prediction history for trend analysis\n *\n * State Management:\n * - `result`: Stores the most recent prediction outcome from the backend API\n * - `history`: Accumulates all prediction attempts with timestamps for longitudinal analysis\n *\n * User Experience Flow:\n * 1. User enters game statistics through the PredictionForm component\n * 2. Form submission triggers API call to machine learning prediction service\n * 3. Successful predictions are displayed immediately and archived in history\n * 4. Historical predictions are visualized through interactive charts\n * 5. Error states are communicated through user-friendly alert messages\n *\n * Integration Points:\n * - PredictionForm: Receives game statistics and initiates prediction requests\n * - PredictionResult: Displays the latest prediction outcome with confidence metrics\n * - HistoryChart: Visualizes prediction trends and historical performance\n * - Backend API: Communicates with FastAPI server for ML-powered predictions\n *\n * Error Handling:\n * - Network failures are caught and displayed as user alerts\n * - Backend unavailability is communicated clearly to maintain user trust\n * - Graceful degradation ensures the interface remains functional during outages\n *\n * Performance Considerations:\n * - Efficient state updates prevent unnecessary re-renders\n * - History accumulation is optimized for memory usage\n * - API calls are properly awaited to prevent race conditions\n *\n * @component\n * @example\n * ```jsx\n * function App() {\n *   // Component automatically handles all prediction workflow\n *   return <App />;\n * }\n * ```\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [result, setResult] = useState(null);\n  const [history, setHistory] = useState([]);\n\n  /**\n   * Submit handler invoked by the form with game stats.\n   * Posts data to the backend and stores the prediction result.\n   */\n  const handlePredict = async gameStats => {\n    try {\n      const response = await axios.post('/predict', gameStats);\n      const data = response.data;\n      setResult(data);\n      setHistory(prev => [...prev, {\n        date: new Date(),\n        ...data\n      }]);\n    } catch (error) {\n      console.error('Prediction error:', error);\n      alert('Failed to get prediction. Ensure the backend is running.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"NFL Game Predictor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PredictionForm, {\n      onPredict: handlePredict\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(PredictionResult, {\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 18\n    }, this), history.length > 0 && /*#__PURE__*/_jsxDEV(HistoryChart, {\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aZLf77KNbr2UAHBX8qTXCRoxCW0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PredictionForm","PredictionResult","HistoryChart","axios","jsxDEV","_jsxDEV","App","_s","result","setResult","history","setHistory","handlePredict","gameStats","response","post","data","prev","date","Date","error","console","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onPredict","length","_c","$RefreshReg$"],"sources":["C:/Users/iProg/OneDrive/Documents/Football_predict/nfl_prediction_system/nfl_prediction_system/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PredictionForm from './components/PredictionForm';\nimport PredictionResult from './components/PredictionResult';\nimport HistoryChart from './components/HistoryChart';\nimport axios from 'axios';\n\n/**\n * NFL Game Prediction Dashboard - Main Application Component\n *\n * This sophisticated React component serves as the central hub for an interactive\n * NFL game outcome prediction system. It orchestrates a seamless user experience\n * by managing prediction workflows, maintaining historical data, and providing\n * real-time visual feedback through dynamic charts and result displays.\n *\n * Key Responsibilities:\n * - Manages application state for prediction results and historical records\n * - Coordinates communication between user input forms and backend prediction services\n * - Renders conditional UI components based on user interactions and data availability\n * - Implements error handling for network requests and API failures\n * - Maintains chronological prediction history for trend analysis\n *\n * State Management:\n * - `result`: Stores the most recent prediction outcome from the backend API\n * - `history`: Accumulates all prediction attempts with timestamps for longitudinal analysis\n *\n * User Experience Flow:\n * 1. User enters game statistics through the PredictionForm component\n * 2. Form submission triggers API call to machine learning prediction service\n * 3. Successful predictions are displayed immediately and archived in history\n * 4. Historical predictions are visualized through interactive charts\n * 5. Error states are communicated through user-friendly alert messages\n *\n * Integration Points:\n * - PredictionForm: Receives game statistics and initiates prediction requests\n * - PredictionResult: Displays the latest prediction outcome with confidence metrics\n * - HistoryChart: Visualizes prediction trends and historical performance\n * - Backend API: Communicates with FastAPI server for ML-powered predictions\n *\n * Error Handling:\n * - Network failures are caught and displayed as user alerts\n * - Backend unavailability is communicated clearly to maintain user trust\n * - Graceful degradation ensures the interface remains functional during outages\n *\n * Performance Considerations:\n * - Efficient state updates prevent unnecessary re-renders\n * - History accumulation is optimized for memory usage\n * - API calls are properly awaited to prevent race conditions\n *\n * @component\n * @example\n * ```jsx\n * function App() {\n *   // Component automatically handles all prediction workflow\n *   return <App />;\n * }\n * ```\n */\nfunction App() {\n  const [result, setResult] = useState(null);\n  const [history, setHistory] = useState([]);\n\n  /**\n   * Submit handler invoked by the form with game stats.\n   * Posts data to the backend and stores the prediction result.\n   */\n  const handlePredict = async (gameStats) => {\n    try {\n      const response = await axios.post('/predict', gameStats);\n      const data = response.data;\n      setResult(data);\n      setHistory((prev) => [...prev, { date: new Date(), ...data }]);\n    } catch (error) {\n      console.error('Prediction error:', error);\n      alert('Failed to get prediction. Ensure the backend is running.');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>NFL Game Predictor</h1>\n      <PredictionForm onPredict={handlePredict} />\n      {result && <PredictionResult result={result} />}\n      {history.length > 0 && <HistoryChart history={history} />}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA,SAAAC,MAAA,IAAAC,OAAA;AAmDA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAE1C;AACF;AACA;AACA;EACE,MAAMa,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,UAAU,EAAEF,SAAS,CAAC;MACxD,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1BP,SAAS,CAACO,IAAI,CAAC;MACfL,UAAU,CAAEM,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAEC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC;QAAE,GAAGH;MAAK,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCE,KAAK,CAAC,0DAA0D,CAAC;IACnE;EACF,CAAC;EAED,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBnB,OAAA;MAAAmB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BvB,OAAA,CAACL,cAAc;MAAC6B,SAAS,EAAEjB;IAAc;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3CpB,MAAM,iBAAIH,OAAA,CAACJ,gBAAgB;MAACO,MAAM,EAAEA;IAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9ClB,OAAO,CAACoB,MAAM,GAAG,CAAC,iBAAIzB,OAAA,CAACH,YAAY;MAACQ,OAAO,EAAEA;IAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV;AAACrB,EAAA,CA5BQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}