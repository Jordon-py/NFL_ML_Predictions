{"ast":null,"code":"/**\r\n * API client for NFL prediction system\r\n * Centralizes all API calls with error handling and base URL management\r\n */\n\nconst API_BASE = import.meta.env.VITE_API_BASE || 'http://127.0.0.1:8000';\n\n/**\r\n * Generic fetch wrapper with JSON handling and error management\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {object} options - Fetch options (method, body, etc.)\r\n * @returns {Promise<object>} Parsed JSON response\r\n * @throws {Error} If request fails or returns non-2xx status\r\n */\nasync function apiRequest(endpoint, options = {}) {\n  const url = `${API_BASE}${endpoint}`;\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`API Error: ${response.status} - ${errorData.detail || response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`[API] ${options.method || 'GET'} ${endpoint} failed:`, error);\n    throw error;\n  }\n}\n\n/**\r\n * Fetch next week's NFL schedule\r\n * @returns {Promise<Array<{season: number, week: number, kickoff_iso: string, home_abbr: string, away_abbr: string}>>}\r\n */\nexport async function getNextWeekSchedule() {\n  return apiRequest('/schedule/next-week');\n}\n\n/**\r\n * Predict game outcome using team abbreviations\r\n * @param {object} payload - Prediction payload\r\n * @param {string} payload.home_team - Home team abbreviation\r\n * @param {string} payload.away_team - Away team abbreviation\r\n * @param {number} payload.season - Season year\r\n * @param {number} payload.week - Week number\r\n * @returns {Promise<{home_score: number, away_score: number, point_diff: number}>}\r\n */\nexport async function predictGame(payload) {\n  return apiRequest('/predict', {\n    method: 'POST',\n    body: JSON.stringify(payload)\n  });\n}\n\n/**\r\n * Start model retraining process\r\n * @returns {Promise<{status: 'started' | 'queued' | 'done'}>}\r\n */\nexport async function startTraining() {\n  return apiRequest('/train', {\n    method: 'POST'\n  });\n}\n\n/**\r\n * Health check for API connectivity\r\n * @returns {Promise<{status: string, mode: string, reason?: string}>}\r\n */\nexport async function getHealthStatus() {\n  return apiRequest('/health');\n}","map":{"version":3,"names":["API_BASE","import","meta","env","VITE_API_BASE","apiRequest","endpoint","options","url","response","fetch","headers","ok","errorData","json","catch","Error","status","detail","statusText","error","console","method","getNextWeekSchedule","predictGame","payload","body","JSON","stringify","startTraining","getHealthStatus"],"sources":["C:/Users/iProg/OneDrive/Documents/Football_predict/nfl_prediction_system/nfl_prediction_system/frontend/src/api/client.js"],"sourcesContent":["/**\r\n * API client for NFL prediction system\r\n * Centralizes all API calls with error handling and base URL management\r\n */\r\n\r\nconst API_BASE = import.meta.env.VITE_API_BASE || 'http://127.0.0.1:8000';\r\n\r\n/**\r\n * Generic fetch wrapper with JSON handling and error management\r\n * @param {string} endpoint - API endpoint (without base URL)\r\n * @param {object} options - Fetch options (method, body, etc.)\r\n * @returns {Promise<object>} Parsed JSON response\r\n * @throws {Error} If request fails or returns non-2xx status\r\n */\r\nasync function apiRequest(endpoint, options = {}) {\r\n  const url = `${API_BASE}${endpoint}`;\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(`API Error: ${response.status} - ${errorData.detail || response.statusText}`);\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(`[API] ${options.method || 'GET'} ${endpoint} failed:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch next week's NFL schedule\r\n * @returns {Promise<Array<{season: number, week: number, kickoff_iso: string, home_abbr: string, away_abbr: string}>>}\r\n */\r\nexport async function getNextWeekSchedule() {\r\n  return apiRequest('/schedule/next-week');\r\n}\r\n\r\n/**\r\n * Predict game outcome using team abbreviations\r\n * @param {object} payload - Prediction payload\r\n * @param {string} payload.home_team - Home team abbreviation\r\n * @param {string} payload.away_team - Away team abbreviation\r\n * @param {number} payload.season - Season year\r\n * @param {number} payload.week - Week number\r\n * @returns {Promise<{home_score: number, away_score: number, point_diff: number}>}\r\n */\r\nexport async function predictGame(payload) {\r\n  return apiRequest('/predict', {\r\n    method: 'POST',\r\n    body: JSON.stringify(payload),\r\n  });\r\n}\r\n\r\n/**\r\n * Start model retraining process\r\n * @returns {Promise<{status: 'started' | 'queued' | 'done'}>}\r\n */\r\nexport async function startTraining() {\r\n  return apiRequest('/train', {\r\n    method: 'POST',\r\n  });\r\n}\r\n\r\n/**\r\n * Health check for API connectivity\r\n * @returns {Promise<{status: string, mode: string, reason?: string}>}\r\n */\r\nexport async function getHealthStatus() {\r\n  return apiRequest('/health');\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,aAAa,IAAI,uBAAuB;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,UAAUA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChD,MAAMC,GAAG,GAAG,GAAGR,QAAQ,GAAGM,QAAQ,EAAE;EAEpC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAChCG,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGJ,OAAO,CAACI;MACb,CAAC;MACD,GAAGJ;IACL,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM,IAAIC,KAAK,CAAC,cAAcP,QAAQ,CAACQ,MAAM,MAAMJ,SAAS,CAACK,MAAM,IAAIT,QAAQ,CAACU,UAAU,EAAE,CAAC;IAC/F;IAEA,OAAO,MAAMV,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAASb,OAAO,CAACe,MAAM,IAAI,KAAK,IAAIhB,QAAQ,UAAU,EAAEc,KAAK,CAAC;IAC5E,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeG,mBAAmBA,CAAA,EAAG;EAC1C,OAAOlB,UAAU,CAAC,qBAAqB,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAemB,WAAWA,CAACC,OAAO,EAAE;EACzC,OAAOpB,UAAU,CAAC,UAAU,EAAE;IAC5BiB,MAAM,EAAE,MAAM;IACdI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,OAAO;EAC9B,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeI,aAAaA,CAAA,EAAG;EACpC,OAAOxB,UAAU,CAAC,QAAQ,EAAE;IAC1BiB,MAAM,EAAE;EACV,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeQ,eAAeA,CAAA,EAAG;EACtC,OAAOzB,UAAU,CAAC,SAAS,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}